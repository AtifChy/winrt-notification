name: CI

on:
  pull_request:
  push:
    branches: [dev]

jobs:
  Check_Formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
        components: rustfmt
    - name: Check Formatting
      run: cargo +stable fmt --all -- --check

  tests:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        rust_version: [1.57.0, stable, nightly]
        platform:
          # Note: Make sure that we test all the `docs.rs` targets defined in Cargo.toml!
          - { target: x86_64-pc-windows-msvc,   os: windows-latest,  }
          - { target: i686-pc-windows-msvc,     os: windows-latest,  }
          - { target: x86_64-pc-windows-gnu,    os: windows-latest, host: -x86_64-pc-windows-gnu }
          - { target: i686-pc-windows-gnu,      os: windows-latest, host: -i686-pc-windows-gnu }

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      PKG_CONFIG_ALLOW_CROSS: 1
      RUSTFLAGS: "-C debuginfo=0 --deny warnings"
      OPTIONS: ${{ matrix.platform.options }}
      FEATURES: ${{ format(',{0}', matrix.platform.features ) }}
      CMD: ${{ matrix.platform.cmd }}
      RUSTDOCFLAGS: -Dwarnings

    runs-on: ${{ matrix.platform.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Cache cargo folder
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ matrix.platform.target }}-cargo-${{ matrix.rust_version }}

    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust_version }}${{ matrix.platform.host }}
        targets: ${{ matrix.platform.target }}
        components: clippy

    - name: Check documentation
      shell: bash
      run: cargo $CMD doc --no-deps --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES --document-private-items

    - name: Build tests
      shell: bash
      run: cargo $CMD test --no-run --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES

    - name: Lint with clippy
      shell: bash
      if: (matrix.rust_version == '1.57.0') && !contains(matrix.platform.options, '--no-default-features')
      run: cargo clippy --all-targets --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES -- -Dwarnings
